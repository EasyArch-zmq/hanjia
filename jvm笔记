# hanjia1.类加载：
      在Java代码中，类型的加载，连接和初始化过程都是在程序运行期间完成的。
*类型：指的是自己定义的class，接口，枚举（不涉及对象的概念）。
*对象：指的是new一个object得到的产物称之为对象或者实例。
*类型加载：典型场景是将已经编译好的class（字节码）文件从磁盘上加载到内存里。

**类加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在内存中创建一个Java.lang.Class对象用来封装类在方法区内的数据结构。



2.类加载器：
      Java中的每个类型（如String）进入jvm管理的内存中是通过类加载器做到的。
      类加载器指的是加载类的工具。
*Java虚拟机结束生命周期的几种情况：（jvm本身就是一个进程）
      *程序中显示地执行System.exit()方法
      *程序正常执行结束了
      *程序执行过程中遇到了异常或者错误而异常终止
      *由于操作系统出错导致jvm进程终止（控制不了的）

3.类的加载，连接，初始化
        *加载：查找与加载类的二进制数据
         *连接：
	*验证：确保被加载的类的正确性
	*准备：为类的静态变量分配内存，将其初始化为默认值
	*解析：把类中的符号引用转换为直接引用
         *初始化:为类的静态变量赋予正确的初始值。

**Java程序对类的使用方式分为两种：
	*主动使用
	*被动使用
**所有的Java虚拟机实现必须在每个类或者接口被Java程序“首次主动使用”时才会初始化他们。

*对类的主动使用：
	*创建类的实例
	*访问某个类或接口的静态变量，或者对静态变量赋值
	*调用类的静态方法
	*反射（如Class.forName("com.test.Test")）
	*初始化一个类的子类，父类也会被初始化。
	*Java虚拟机启动时被标明为启动类的类（包含main（）方法的类）（Java Test）
*对类的被动使用：除了以上的方式其他方式都称为被动使用。不会导致类的初始化。（但不代表不会加载）

**类的加载：
  *加载.class文件的方式
    *从本地系统中直接加载
    *通过网络下载.class文件
    *从zip，jar等归档文件中加载.class文件
    *从专有数据库中提取.class文件
    *将Java源文件动态编译为.class文件


**对于静态字段来说，只有直接定义了该字段的类才会被初始化。
例如父类有static字段，子类没有，通过子类调用父类
例子在：


3.常量final
  final标志的属性就变成了一个常量，它的值一旦给了就不能被改变了，这个常量在编译阶段就会被存入到调用这个属性的方法所在的类的常量池中。
  并没有直接引用到定义这个属性的类，因此不会触发这个类的初始化。
  

  













